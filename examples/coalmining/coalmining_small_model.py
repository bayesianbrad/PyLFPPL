#
# Generated: 2018-01-20 12:13:37.813820
#
import math
import numpy as np
import torch
from torch.autograd import Variable
import pyfo.distributions as dist
from pyfo.utils.interface import interface

class model(interface):
	"""
	Vertices V:
	  c20004, c20009, c20014, c20019, c20024, c20029, c20034, c20039, c20044, c20049, cond_20005, cond_20010, cond_20015, cond_20020, cond_20025, cond_20030, cond_20035, cond_20040, cond_20045, cond_20050, f20006, f20011, f20016, f20021, f20026, f20031, f20036, f20041, f20046, f20051, x20001, x20002, x20003, y20007, y20008, y20012, y20013, y20017, y20018, y20022, y20023, y20027, y20028, y20032, y20033, y20037, y20038, y20042, y20043, y20047, y20048, y20052, y20053
	Arcs A:
	  (cond_20050, y20052), (x20002, y20032), (x20001, c20004), (x20003, f20036), (x20003, c20034), (y20018, c20014), (cond_20005, y20008), (x20002, y20042), (f20051, c20049), (x20002, c20049), (x20003, c20009), (f20031, c20029), (y20048, c20044), (f20026, cond_20025), (cond_20020, y20022), (x20001, c20049), (x20001, c20019), (x20002, y20017), (x20003, f20006), (y20047, c20044), (x20002, c20004), (x20002, c20019), (x20002, c20034), (y20012, c20009), (x20001, c20034), (x20001, y20018), (f20046, cond_20045), (x20002, c20029), (x20003, f20016), (x20003, c20049), (cond_20010, c20009), (f20031, cond_20030), (x20002, c20014), (x20001, y20023), (x20002, y20027), (f20026, c20024), (cond_20050, y20053), (cond_20030, y20032), (x20001, c20014), (cond_20005, c20004), (x20002, y20047), (x20002, y20037), (f20021, cond_20020), (x20003, c20014), (cond_20005, y20007), (cond_20010, y20013), (f20006, cond_20005), (y20032, c20029), (cond_20030, y20033), (y20038, c20034), (y20052, c20049), (x20003, f20051), (x20003, f20011), (cond_20020, y20023), (x20001, y20028), (y20042, c20039), (x20003, c20019), (f20016, c20014), (f20036, cond_20035), (y20013, c20009), (cond_20035, c20034), (y20027, c20024), (x20003, c20029), (x20003, f20046), (f20051, cond_20050), (x20001, y20048), (y20053, c20049), (cond_20010, y20012), (f20011, cond_20010), (x20001, c20044), (f20011, c20009), (x20001, c20039), (f20021, c20019), (x20001, y20043), (y20022, c20019), (cond_20050, c20049), (y20023, c20019), (y20037, c20034), (y20043, c20039), (x20001, y20013), (cond_20025, y20027), (f20006, c20004), (cond_20030, c20029), (y20008, c20004), (cond_20025, y20028), (x20001, y20038), (x20002, y20052), (cond_20045, c20044), (x20002, c20044), (cond_20015, y20017), (x20001, c20024), (x20003, c20039), (cond_20040, y20042), (y20017, c20014), (x20002, y20007), (x20001, y20033), (y20028, c20024), (x20001, c20009), (y20033, c20029), (cond_20045, y20048), (cond_20015, c20014), (x20002, c20009), (f20036, c20034), (f20046, c20044), (x20001, y20053), (x20002, y20012), (x20002, c20024), (cond_20035, y20037), (x20003, c20044), (x20002, c20039), (cond_20045, y20047), (x20003, c20004), (cond_20025, c20024), (x20003, f20041), (x20003, f20026), (x20002, y20022), (x20001, y20008), (x20003, f20031), (x20003, f20021), (f20041, c20039), (x20003, c20024), (cond_20020, c20019), (cond_20040, y20043), (x20001, c20029), (f20016, cond_20015), (cond_20040, c20039), (cond_20035, y20038), (y20007, c20004), (cond_20015, y20018), (f20041, cond_20040)
	Conditional densities C:
	  x20003 -> dist.Uniform(a=0, b=10)
	  f20051 -> (9 - x20003)
	  cond_20050 -> (f20051 >= 0).data[0]
	  x20002 -> dist.Exponential(lam=1)
	  y20052 -> dist.Exponential(lam=x20002)
	  x20001 -> dist.Exponential(lam=1)
	  y20053 -> dist.Exponential(lam=x20001)
	  c20049 -> y20052 if cond_20050 else y20053
	  f20046 -> (8 - x20003)
	  cond_20045 -> (f20046 >= 0).data[0]
	  y20047 -> dist.Exponential(lam=x20002)
	  y20048 -> dist.Exponential(lam=x20001)
	  c20044 -> y20047 if cond_20045 else y20048
	  f20041 -> (7 - x20003)
	  cond_20040 -> (f20041 >= 0).data[0]
	  y20042 -> dist.Exponential(lam=x20002)
	  y20043 -> dist.Exponential(lam=x20001)
	  c20039 -> y20042 if cond_20040 else y20043
	  f20036 -> (6 - x20003)
	  cond_20035 -> (f20036 >= 0).data[0]
	  y20037 -> dist.Exponential(lam=x20002)
	  y20038 -> dist.Exponential(lam=x20001)
	  c20034 -> y20037 if cond_20035 else y20038
	  f20031 -> (5 - x20003)
	  cond_20030 -> (f20031 >= 0).data[0]
	  y20032 -> dist.Exponential(lam=x20002)
	  y20033 -> dist.Exponential(lam=x20001)
	  c20029 -> y20032 if cond_20030 else y20033
	  f20026 -> (4 - x20003)
	  cond_20025 -> (f20026 >= 0).data[0]
	  y20027 -> dist.Exponential(lam=x20002)
	  y20028 -> dist.Exponential(lam=x20001)
	  c20024 -> y20027 if cond_20025 else y20028
	  f20021 -> (3 - x20003)
	  cond_20020 -> (f20021 >= 0).data[0]
	  y20022 -> dist.Exponential(lam=x20002)
	  y20023 -> dist.Exponential(lam=x20001)
	  c20019 -> y20022 if cond_20020 else y20023
	  f20016 -> (2 - x20003)
	  cond_20015 -> (f20016 >= 0).data[0]
	  y20017 -> dist.Exponential(lam=x20002)
	  y20018 -> dist.Exponential(lam=x20001)
	  c20014 -> y20017 if cond_20015 else y20018
	  f20011 -> (1 - x20003)
	  cond_20010 -> (f20011 >= 0).data[0]
	  y20012 -> dist.Exponential(lam=x20002)
	  y20013 -> dist.Exponential(lam=x20001)
	  c20009 -> y20012 if cond_20010 else y20013
	  f20006 -> (0 - x20003)
	  cond_20005 -> (f20006 >= 0).data[0]
	  y20007 -> dist.Exponential(lam=x20002)
	  y20008 -> dist.Exponential(lam=x20001)
	  c20004 -> y20007 if cond_20005 else y20008
	Observed values O:
	  y20052 -> [4, 5, 4, 4, 1, 0, 0, 1, 0, 1][1:][1:][1:][1:][1:][1:][1:][1:][1:][0]
	  y20053 -> [4, 5, 4, 4, 1, 0, 0, 1, 0, 1][1:][1:][1:][1:][1:][1:][1:][1:][1:][0]
	  y20047 -> [4, 5, 4, 4, 1, 0, 0, 1, 0, 1][1:][1:][1:][1:][1:][1:][1:][1:][0]
	  y20048 -> [4, 5, 4, 4, 1, 0, 0, 1, 0, 1][1:][1:][1:][1:][1:][1:][1:][1:][0]
	  y20042 -> [4, 5, 4, 4, 1, 0, 0, 1, 0, 1][1:][1:][1:][1:][1:][1:][1:][0]
	  y20043 -> [4, 5, 4, 4, 1, 0, 0, 1, 0, 1][1:][1:][1:][1:][1:][1:][1:][0]
	  y20037 -> [4, 5, 4, 4, 1, 0, 0, 1, 0, 1][1:][1:][1:][1:][1:][1:][0]
	  y20038 -> [4, 5, 4, 4, 1, 0, 0, 1, 0, 1][1:][1:][1:][1:][1:][1:][0]
	  y20032 -> [4, 5, 4, 4, 1, 0, 0, 1, 0, 1][1:][1:][1:][1:][1:][0]
	  y20033 -> [4, 5, 4, 4, 1, 0, 0, 1, 0, 1][1:][1:][1:][1:][1:][0]
	  y20027 -> [4, 5, 4, 4, 1, 0, 0, 1, 0, 1][1:][1:][1:][1:][0]
	  y20028 -> [4, 5, 4, 4, 1, 0, 0, 1, 0, 1][1:][1:][1:][1:][0]
	  y20022 -> [4, 5, 4, 4, 1, 0, 0, 1, 0, 1][1:][1:][1:][0]
	  y20023 -> [4, 5, 4, 4, 1, 0, 0, 1, 0, 1][1:][1:][1:][0]
	  y20017 -> [4, 5, 4, 4, 1, 0, 0, 1, 0, 1][1:][1:][0]
	  y20018 -> [4, 5, 4, 4, 1, 0, 0, 1, 0, 1][1:][1:][0]
	  y20012 -> [4, 5, 4, 4, 1, 0, 0, 1, 0, 1][1:][0]
	  y20013 -> [4, 5, 4, 4, 1, 0, 0, 1, 0, 1][1:][0]
	  y20007 -> [4, 5, 4, 4, 1, 0, 0, 1, 0, 1][0]
	  y20008 -> [4, 5, 4, 4, 1, 0, 0, 1, 0, 1][0]
	"""

	@classmethod
	def get_vertices(self):
		vertices = {'y20052', 'f20041', 'f20026', 'c20024', 'cond_20010', 'y20033', 'c20029', 'y20028', 'y20018', 'cond_20025', 'c20019', 'y20012', 'y20042', 'f20051', 'x20002', 'f20016', 'y20047', 'x20003', 'y20037', 'f20011', 'y20022', 'c20034', 'cond_20020', 'y20053', 'y20008', 'f20046', 'y20043', 'y20048', 'y20013', 'f20006', 'c20004', 'y20027', 'c20044', 'c20039', 'cond_20035', 'cond_20030', 'f20021', 'c20009', 'y20017', 'f20031', 'cond_20015', 'cond_20005', 'c20014', 'cond_20040', 'cond_20050', 'c20049', 'y20023', 'y20038', 'x20001', 'y20007', 'f20036', 'cond_20045', 'y20032'}
		return list(vertices)

	@classmethod
	def get_arcs(self):
		arcs = {('cond_20050', 'y20052'), ('x20002', 'y20032'), ('x20001', 'c20004'), ('x20003', 'f20036'), ('x20003', 'c20034'), ('y20018', 'c20014'), ('cond_20005', 'y20008'), ('x20002', 'y20042'), ('f20051', 'c20049'), ('x20002', 'c20049'), ('x20003', 'c20009'), ('f20031', 'c20029'), ('y20048', 'c20044'), ('f20026', 'cond_20025'), ('cond_20020', 'y20022'), ('x20001', 'c20049'), ('x20001', 'c20019'), ('x20002', 'y20017'), ('x20003', 'f20006'), ('y20047', 'c20044'), ('x20002', 'c20004'), ('x20002', 'c20019'), ('x20002', 'c20034'), ('y20012', 'c20009'), ('x20001', 'c20034'), ('x20001', 'y20018'), ('f20046', 'cond_20045'), ('x20002', 'c20029'), ('x20003', 'f20016'), ('x20003', 'c20049'), ('cond_20010', 'c20009'), ('f20031', 'cond_20030'), ('x20002', 'c20014'), ('x20001', 'y20023'), ('x20002', 'y20027'), ('f20026', 'c20024'), ('cond_20050', 'y20053'), ('cond_20030', 'y20032'), ('x20001', 'c20014'), ('cond_20005', 'c20004'), ('x20002', 'y20047'), ('x20002', 'y20037'), ('f20021', 'cond_20020'), ('x20003', 'c20014'), ('cond_20005', 'y20007'), ('cond_20010', 'y20013'), ('f20006', 'cond_20005'), ('y20032', 'c20029'), ('cond_20030', 'y20033'), ('y20038', 'c20034'), ('y20052', 'c20049'), ('x20003', 'f20051'), ('x20003', 'f20011'), ('cond_20020', 'y20023'), ('x20001', 'y20028'), ('y20042', 'c20039'), ('x20003', 'c20019'), ('f20016', 'c20014'), ('f20036', 'cond_20035'), ('y20013', 'c20009'), ('cond_20035', 'c20034'), ('y20027', 'c20024'), ('x20003', 'c20029'), ('x20003', 'f20046'), ('f20051', 'cond_20050'), ('x20001', 'y20048'), ('y20053', 'c20049'), ('cond_20010', 'y20012'), ('f20011', 'cond_20010'), ('x20001', 'c20044'), ('f20011', 'c20009'), ('x20001', 'c20039'), ('f20021', 'c20019'), ('x20001', 'y20043'), ('y20022', 'c20019'), ('cond_20050', 'c20049'), ('y20023', 'c20019'), ('y20037', 'c20034'), ('y20043', 'c20039'), ('x20001', 'y20013'), ('cond_20025', 'y20027'), ('f20006', 'c20004'), ('cond_20030', 'c20029'), ('y20008', 'c20004'), ('cond_20025', 'y20028'), ('x20001', 'y20038'), ('x20002', 'y20052'), ('cond_20045', 'c20044'), ('x20002', 'c20044'), ('cond_20015', 'y20017'), ('x20001', 'c20024'), ('x20003', 'c20039'), ('cond_20040', 'y20042'), ('y20017', 'c20014'), ('x20002', 'y20007'), ('x20001', 'y20033'), ('y20028', 'c20024'), ('x20001', 'c20009'), ('y20033', 'c20029'), ('cond_20045', 'y20048'), ('cond_20015', 'c20014'), ('x20002', 'c20009'), ('f20036', 'c20034'), ('f20046', 'c20044'), ('x20001', 'y20053'), ('x20002', 'y20012'), ('x20002', 'c20024'), ('cond_20035', 'y20037'), ('x20003', 'c20044'), ('x20002', 'c20039'), ('cond_20045', 'y20047'), ('x20003', 'c20004'), ('cond_20025', 'c20024'), ('x20003', 'f20041'), ('x20003', 'f20026'), ('x20002', 'y20022'), ('x20001', 'y20008'), ('x20003', 'f20031'), ('x20003', 'f20021'), ('f20041', 'c20039'), ('x20003', 'c20024'), ('cond_20020', 'c20019'), ('cond_20040', 'y20043'), ('x20001', 'c20029'), ('f20016', 'cond_20015'), ('cond_20040', 'c20039'), ('cond_20035', 'y20038'), ('y20007', 'c20004'), ('cond_20015', 'y20018'), ('f20041', 'cond_20040')}
		return list(arcs)

	@classmethod
	def get_discrete_distributions(self):
		disc_dists = {}
		return disc_dists

	@classmethod
	def get_continuous_distributions(self):
		cont_dists = {
		  'x20002': 'Exponential',
		  'x20001': 'Exponential',
		  'x20003': 'Uniform'
		}
		return cont_dists

	@classmethod
	def get_cond_functions(self):
		cond_functions = {
		  'cond_20050': 'f20051',
		  'f20051': lambda state: (state['n'] - state['x20003']),
		  'cond_20045': 'f20046',
		  'f20046': lambda state: (state['n'] - state['x20003']),
		  'cond_20040': 'f20041',
		  'f20041': lambda state: (state['n'] - state['x20003']),
		  'cond_20035': 'f20036',
		  'f20036': lambda state: (state['n'] - state['x20003']),
		  'cond_20030': 'f20031',
		  'f20031': lambda state: (state['n'] - state['x20003']),
		  'cond_20025': 'f20026',
		  'f20026': lambda state: (state['n'] - state['x20003']),
		  'cond_20020': 'f20021',
		  'f20021': lambda state: (state['n'] - state['x20003']),
		  'cond_20015': 'f20016',
		  'f20016': lambda state: (state['n'] - state['x20003']),
		  'cond_20010': 'f20011',
		  'f20011': lambda state: (state['n'] - state['x20003']),
		  'cond_20005': 'f20006',
		  'f20006': lambda state: (state['n'] - state['x20003'])
		}
		return cond_functions

	@classmethod
	def get_dist_parameter_size(self, name):
		dist_sizes = {}
		if name in dist_sizes:
			return dist_sizes[name]
		else:
			return None

	@classmethod
	def get_original_names(self):
		return {'x20003': 's', 'x20002': 'l', 'x20001': 'e'}

	@classmethod
	def gen_all_keys(self):
		return ['c20004', 'c20009', 'c20014', 'c20019', 'c20024', 'c20029', 'c20034', 'c20039', 'c20044', 'c20049', 'cond_20005', 'cond_20010', 'cond_20015', 'cond_20020', 'cond_20025', 'cond_20030', 'cond_20035', 'cond_20040', 'cond_20045', 'cond_20050', 'f20006', 'f20011', 'f20016', 'f20021', 'f20026', 'f20031', 'f20036', 'f20041', 'f20046', 'f20051', 'x20001', 'x20002', 'x20003', 'y20007', 'y20008', 'y20012', 'y20013', 'y20017', 'y20018', 'y20022', 'y20023', 'y20027', 'y20028', 'y20032', 'y20033', 'y20037', 'y20038', 'y20042', 'y20043', 'y20047', 'y20048', 'y20052', 'y20053']

	@classmethod
	def gen_cond_vars(self):
		return ['cond_20015', 'cond_20005', 'cond_20040', 'cond_20050', 'cond_20020', 'cond_20010', 'cond_20035', 'cond_20030', 'cond_20025', 'cond_20045']

	@classmethod
	def gen_cont_vars(self):
		return ['x20002', 'x20001']

	@classmethod
	def gen_disc_vars(self):
		return []

	@classmethod
	def gen_if_functions(self):
		return ['f20051', 'f20016', 'f20011', 'f20041', 'f20006', 'f20026', 'f20021', 'f20046', 'f20036', 'f20031']

	@classmethod
	def gen_if_vars(self):
		return ['x20003']

	@classmethod
	def gen_pdf(self, state):
		dist_x20001 = dist.Exponential(lam=1)
		x20001 = state['x20001']
		p10000 = dist_x20001.log_pdf(x20001)
		dist_x20002 = dist.Exponential(lam=1)
		x20002 = state['x20002']
		p10001 = dist_x20002.log_pdf(x20002)
		dist_x20003 = dist.Uniform(a=0, b=10)
		x20003 = state['x20003']
		p10002 = dist_x20003.log_pdf(x20003)
		f20006 = (0 - x20003)
		f20011 = (1 - x20003)
		f20016 = (2 - x20003)
		f20021 = (3 - x20003)
		f20026 = (4 - x20003)
		f20031 = (5 - x20003)
		f20036 = (6 - x20003)
		f20041 = (7 - x20003)
		f20046 = (8 - x20003)
		f20051 = (9 - x20003)
		cond_20005 = (f20006 >= 0).data[0]
		cond_20010 = (f20011 >= 0).data[0]
		cond_20015 = (f20016 >= 0).data[0]
		cond_20020 = (f20021 >= 0).data[0]
		cond_20025 = (f20026 >= 0).data[0]
		cond_20030 = (f20031 >= 0).data[0]
		cond_20035 = (f20036 >= 0).data[0]
		cond_20040 = (f20041 >= 0).data[0]
		cond_20045 = (f20046 >= 0).data[0]
		cond_20050 = (f20051 >= 0).data[0]
		dist_y20007 = dist.Exponential(lam=x20002)
		y20007 = state['y20007']
		p10003 = dist_y20007.log_pdf([4, 5, 4, 4, 1, 0, 0, 1, 0, 1][0]) if cond_20005 else 0
		dist_y20008 = dist.Exponential(lam=x20001)
		y20008 = state['y20008']
		p10004 = dist_y20008.log_pdf([4, 5, 4, 4, 1, 0, 0, 1, 0, 1][0]) if not cond_20005 else 0
		dist_y20012 = dist.Exponential(lam=x20002)
		y20012 = state['y20012']
		p10005 = dist_y20012.log_pdf([4, 5, 4, 4, 1, 0, 0, 1, 0, 1][1:][0]) if cond_20010 else 0
		dist_y20013 = dist.Exponential(lam=x20001)
		y20013 = state['y20013']
		p10006 = dist_y20013.log_pdf([4, 5, 4, 4, 1, 0, 0, 1, 0, 1][1:][0]) if not cond_20010 else 0
		dist_y20017 = dist.Exponential(lam=x20002)
		y20017 = state['y20017']
		p10007 = dist_y20017.log_pdf([4, 5, 4, 4, 1, 0, 0, 1, 0, 1][1:][1:][0]) if cond_20015 else 0
		dist_y20018 = dist.Exponential(lam=x20001)
		y20018 = state['y20018']
		p10008 = dist_y20018.log_pdf([4, 5, 4, 4, 1, 0, 0, 1, 0, 1][1:][1:][0]) if not cond_20015 else 0
		dist_y20022 = dist.Exponential(lam=x20002)
		y20022 = state['y20022']
		p10009 = dist_y20022.log_pdf([4, 5, 4, 4, 1, 0, 0, 1, 0, 1][1:][1:][1:][0]) if cond_20020 else 0
		dist_y20023 = dist.Exponential(lam=x20001)
		y20023 = state['y20023']
		p10010 = dist_y20023.log_pdf([4, 5, 4, 4, 1, 0, 0, 1, 0, 1][1:][1:][1:][0]) if not cond_20020 else 0
		dist_y20027 = dist.Exponential(lam=x20002)
		y20027 = state['y20027']
		p10011 = dist_y20027.log_pdf([4, 5, 4, 4, 1, 0, 0, 1, 0, 1][1:][1:][1:][1:][0]) if cond_20025 else 0
		dist_y20028 = dist.Exponential(lam=x20001)
		y20028 = state['y20028']
		p10012 = dist_y20028.log_pdf([4, 5, 4, 4, 1, 0, 0, 1, 0, 1][1:][1:][1:][1:][0]) if not cond_20025 else 0
		dist_y20032 = dist.Exponential(lam=x20002)
		y20032 = state['y20032']
		p10013 = dist_y20032.log_pdf([4, 5, 4, 4, 1, 0, 0, 1, 0, 1][1:][1:][1:][1:][1:][0]) if cond_20030 else 0
		dist_y20033 = dist.Exponential(lam=x20001)
		y20033 = state['y20033']
		p10014 = dist_y20033.log_pdf([4, 5, 4, 4, 1, 0, 0, 1, 0, 1][1:][1:][1:][1:][1:][0]) if not cond_20030 else 0
		dist_y20037 = dist.Exponential(lam=x20002)
		y20037 = state['y20037']
		p10015 = dist_y20037.log_pdf([4, 5, 4, 4, 1, 0, 0, 1, 0, 1][1:][1:][1:][1:][1:][1:][0]) if cond_20035 else 0
		dist_y20038 = dist.Exponential(lam=x20001)
		y20038 = state['y20038']
		p10016 = dist_y20038.log_pdf([4, 5, 4, 4, 1, 0, 0, 1, 0, 1][1:][1:][1:][1:][1:][1:][0]) if not cond_20035 else 0
		dist_y20042 = dist.Exponential(lam=x20002)
		y20042 = state['y20042']
		p10017 = dist_y20042.log_pdf([4, 5, 4, 4, 1, 0, 0, 1, 0, 1][1:][1:][1:][1:][1:][1:][1:][0]) if cond_20040 else 0
		dist_y20043 = dist.Exponential(lam=x20001)
		y20043 = state['y20043']
		p10018 = dist_y20043.log_pdf([4, 5, 4, 4, 1, 0, 0, 1, 0, 1][1:][1:][1:][1:][1:][1:][1:][0]) if not cond_20040 else 0
		dist_y20047 = dist.Exponential(lam=x20002)
		y20047 = state['y20047']
		p10019 = dist_y20047.log_pdf([4, 5, 4, 4, 1, 0, 0, 1, 0, 1][1:][1:][1:][1:][1:][1:][1:][1:][0]) if cond_20045 else 0
		dist_y20048 = dist.Exponential(lam=x20001)
		y20048 = state['y20048']
		p10020 = dist_y20048.log_pdf([4, 5, 4, 4, 1, 0, 0, 1, 0, 1][1:][1:][1:][1:][1:][1:][1:][1:][0]) if not cond_20045 else 0
		dist_y20052 = dist.Exponential(lam=x20002)
		y20052 = state['y20052']
		p10021 = dist_y20052.log_pdf([4, 5, 4, 4, 1, 0, 0, 1, 0, 1][1:][1:][1:][1:][1:][1:][1:][1:][1:][0]) if cond_20050 else 0
		dist_y20053 = dist.Exponential(lam=x20001)
		y20053 = state['y20053']
		p10022 = dist_y20053.log_pdf([4, 5, 4, 4, 1, 0, 0, 1, 0, 1][1:][1:][1:][1:][1:][1:][1:][1:][1:][0]) if not cond_20050 else 0
		c20004 = y20007 if cond_20005 else y20008
		c20009 = y20012 if cond_20010 else y20013
		c20014 = y20017 if cond_20015 else y20018
		c20019 = y20022 if cond_20020 else y20023
		c20024 = y20027 if cond_20025 else y20028
		c20029 = y20032 if cond_20030 else y20033
		c20034 = y20037 if cond_20035 else y20038
		c20039 = y20042 if cond_20040 else y20043
		c20044 = y20047 if cond_20045 else y20048
		c20049 = y20052 if cond_20050 else y20053
		_lcls = locals()
		for key in state:
			if key in _lcls:
				state[key] = _lcls[key]
		logp = p10000 + p10001 + p10002 + p10003 + p10004 + p10005 + p10006 + p10007 + p10008 + p10009 + p10010 + p10011 + p10012 + p10013 + p10014 + p10015 + p10016 + p10017 + p10018 + p10019 + p10020 + p10021 + p10022
		return logp

	@classmethod
	def gen_prior_samples(self):
		dist_x20001 = dist.Exponential(lam=1)
		x20001 = dist_x20001.sample()
		dist_x20002 = dist.Exponential(lam=1)
		x20002 = dist_x20002.sample()
		dist_x20003 = dist.Uniform(a=0, b=10)
		x20003 = dist_x20003.sample()
		f20006 = (0 - x20003)
		f20011 = (1 - x20003)
		f20016 = (2 - x20003)
		f20021 = (3 - x20003)
		f20026 = (4 - x20003)
		f20031 = (5 - x20003)
		f20036 = (6 - x20003)
		f20041 = (7 - x20003)
		f20046 = (8 - x20003)
		f20051 = (9 - x20003)
		cond_20005 = (f20006 >= 0).data[0]
		cond_20010 = (f20011 >= 0).data[0]
		cond_20015 = (f20016 >= 0).data[0]
		cond_20020 = (f20021 >= 0).data[0]
		cond_20025 = (f20026 >= 0).data[0]
		cond_20030 = (f20031 >= 0).data[0]
		cond_20035 = (f20036 >= 0).data[0]
		cond_20040 = (f20041 >= 0).data[0]
		cond_20045 = (f20046 >= 0).data[0]
		cond_20050 = (f20051 >= 0).data[0]
		dist_y20007 = dist.Exponential(lam=x20002)
		y20007 = [4, 5, 4, 4, 1, 0, 0, 1, 0, 1][0]
		dist_y20008 = dist.Exponential(lam=x20001)
		y20008 = [4, 5, 4, 4, 1, 0, 0, 1, 0, 1][0]
		dist_y20012 = dist.Exponential(lam=x20002)
		y20012 = [4, 5, 4, 4, 1, 0, 0, 1, 0, 1][1:][0]
		dist_y20013 = dist.Exponential(lam=x20001)
		y20013 = [4, 5, 4, 4, 1, 0, 0, 1, 0, 1][1:][0]
		dist_y20017 = dist.Exponential(lam=x20002)
		y20017 = [4, 5, 4, 4, 1, 0, 0, 1, 0, 1][1:][1:][0]
		dist_y20018 = dist.Exponential(lam=x20001)
		y20018 = [4, 5, 4, 4, 1, 0, 0, 1, 0, 1][1:][1:][0]
		dist_y20022 = dist.Exponential(lam=x20002)
		y20022 = [4, 5, 4, 4, 1, 0, 0, 1, 0, 1][1:][1:][1:][0]
		dist_y20023 = dist.Exponential(lam=x20001)
		y20023 = [4, 5, 4, 4, 1, 0, 0, 1, 0, 1][1:][1:][1:][0]
		dist_y20027 = dist.Exponential(lam=x20002)
		y20027 = [4, 5, 4, 4, 1, 0, 0, 1, 0, 1][1:][1:][1:][1:][0]
		dist_y20028 = dist.Exponential(lam=x20001)
		y20028 = [4, 5, 4, 4, 1, 0, 0, 1, 0, 1][1:][1:][1:][1:][0]
		dist_y20032 = dist.Exponential(lam=x20002)
		y20032 = [4, 5, 4, 4, 1, 0, 0, 1, 0, 1][1:][1:][1:][1:][1:][0]
		dist_y20033 = dist.Exponential(lam=x20001)
		y20033 = [4, 5, 4, 4, 1, 0, 0, 1, 0, 1][1:][1:][1:][1:][1:][0]
		dist_y20037 = dist.Exponential(lam=x20002)
		y20037 = [4, 5, 4, 4, 1, 0, 0, 1, 0, 1][1:][1:][1:][1:][1:][1:][0]
		dist_y20038 = dist.Exponential(lam=x20001)
		y20038 = [4, 5, 4, 4, 1, 0, 0, 1, 0, 1][1:][1:][1:][1:][1:][1:][0]
		dist_y20042 = dist.Exponential(lam=x20002)
		y20042 = [4, 5, 4, 4, 1, 0, 0, 1, 0, 1][1:][1:][1:][1:][1:][1:][1:][0]
		dist_y20043 = dist.Exponential(lam=x20001)
		y20043 = [4, 5, 4, 4, 1, 0, 0, 1, 0, 1][1:][1:][1:][1:][1:][1:][1:][0]
		dist_y20047 = dist.Exponential(lam=x20002)
		y20047 = [4, 5, 4, 4, 1, 0, 0, 1, 0, 1][1:][1:][1:][1:][1:][1:][1:][1:][0]
		dist_y20048 = dist.Exponential(lam=x20001)
		y20048 = [4, 5, 4, 4, 1, 0, 0, 1, 0, 1][1:][1:][1:][1:][1:][1:][1:][1:][0]
		dist_y20052 = dist.Exponential(lam=x20002)
		y20052 = [4, 5, 4, 4, 1, 0, 0, 1, 0, 1][1:][1:][1:][1:][1:][1:][1:][1:][1:][0]
		dist_y20053 = dist.Exponential(lam=x20001)
		y20053 = [4, 5, 4, 4, 1, 0, 0, 1, 0, 1][1:][1:][1:][1:][1:][1:][1:][1:][1:][0]
		c20004 = y20007 if cond_20005 else y20008
		c20009 = y20012 if cond_20010 else y20013
		c20014 = y20017 if cond_20015 else y20018
		c20019 = y20022 if cond_20020 else y20023
		c20024 = y20027 if cond_20025 else y20028
		c20029 = y20032 if cond_20030 else y20033
		c20034 = y20037 if cond_20035 else y20038
		c20039 = y20042 if cond_20040 else y20043
		c20044 = y20047 if cond_20045 else y20048
		c20049 = y20052 if cond_20050 else y20053
		state = {}
		for _gv in self.gen_all_keys():
			state[_gv] = locals()[_gv]
		return state  # dictionary

	@classmethod
	def gen_vars(self):
		return ['x20001', 'x20002', 'x20003']
